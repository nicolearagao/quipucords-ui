// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ViewToolbar Component should handle displaying secondary components, fields: secondary 1`] = `
<React.Fragment>
  <Toolbar
    className="quipucords-toolbar"
    clearAllFilters={[Function]}
    clearFiltersButtonText="t(toolbar.label, {"context":"clear-filters"})"
    collapseListedFiltersBreakpoint="lg"
  >
    <ToolbarContent
      isExpanded={false}
      showClearFiltersButton={false}
    >
      <ToolbarToggleGroup
        breakpoint="lg"
        toggleIcon={
          <FilterIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
          />
        }
      >
        <ForwardRef
          variant="filter-group"
        >
          <ToolbarFilter
            categoryName="t(toolbar.label_option, {"context":"search_by_name"})"
            chips={[]}
            deleteChip={[Function]}
            showToolbarItem={true}
          >
            <SearchName />
          </ToolbarFilter>
        </ForwardRef>
      </ToolbarToggleGroup>
      <ToolbarItem
        variant="separator"
      />
      <ToolbarItem
        spacer={
          {
            "default": "spacerSm",
          }
        }
      >
        <ViewToolbarFieldSort
          t={[Function]}
          useOnSelect={[Function]}
          useView={[Function]}
        />
      </ToolbarItem>
      <ToolbarItem
        variant="separator"
      />
      <ToolbarItem>
        <RefreshTimeButton
          lastRefresh={0}
          onRefresh={[Function]}
          t={[Function]}
        />
      </ToolbarItem>
      <ToolbarItem
        alignment={
          {
            "lg": "alignRight",
            "md": "alignLeft",
          }
        }
      >
        <React.Fragment>
          dolor sit
        </React.Fragment>
      </ToolbarItem>
    </ToolbarContent>
  </Toolbar>
  <Divider />
</React.Fragment>
`;

exports[`ViewToolbar Component should handle updating toolbar chips: chips 1`] = `
NodeList [
  <div
    class="pf-c-chip"
    data-ouia-component-id="OUIA-Generated-Chip-1"
    data-ouia-component-type="PF4/Chip"
    data-ouia-safe="true"
  >
    <span
      class="pf-c-chip__text"
      id="pf-random-id-5"
    >
      t(toolbar.label_chip, {"context":"lorem ipsum"})
    </span>
    <button
      aria-disabled="false"
      aria-label="close"
      aria-labelledby="remove_pf-random-id-5 pf-random-id-5"
      class="pf-c-button pf-m-plain"
      data-ouia-component-id="close"
      data-ouia-component-type="PF4/Button"
      data-ouia-safe="true"
      id="remove_pf-random-id-5"
      type="button"
    >
      <svg
        aria-hidden="true"
        fill="currentColor"
        height="1em"
        role="img"
        style="vertical-align: -0.125em;"
        viewBox="0 0 352 512"
        width="1em"
      >
        <path
          d="M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z"
        />
      </svg>
    </button>
  </div>,
]
`;

exports[`ViewToolbar Component should hide categories when a single filter is available: single filter 1`] = `
NodeList [
  <input
    aria-invalid="false"
    aria-label="t(toolbar.label_placeholder_filter, {"context":"search_by_name"})"
    class="pf-c-form-control quipucords-form__text-input "
    data-ouia-component-id="OUIA-Generated-TextInputBase-2"
    data-ouia-component-type="PF4/TextInput"
    data-ouia-safe="true"
    data-test="toolbarSearchName"
    id="generatedid-"
    maxlength="255"
    name="generatedid-"
    placeholder="t(toolbar.label_placeholder_filter, {"context":"search_by_name"})"
    type="text"
    value=""
  />,
]
`;

exports[`ViewToolbar Component should render a basic component: basic 1`] = `
<React.Fragment>
  <Toolbar
    className="quipucords-toolbar"
    clearAllFilters={[Function]}
    clearFiltersButtonText="t(toolbar.label, {"context":"clear-filters"})"
    collapseListedFiltersBreakpoint="lg"
  >
    <ToolbarContent
      isExpanded={false}
      showClearFiltersButton={false}
    >
      <ToolbarToggleGroup
        breakpoint="lg"
        toggleIcon={
          <FilterIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
          />
        }
      >
        <ForwardRef
          variant="filter-group"
        >
          <ToolbarItem>
            <ViewToolbarSelectCategory
              t={[Function]}
              useOnSelect={[Function]}
              useSelector={[Function]}
              useView={[Function]}
            />
          </ToolbarItem>
          <ToolbarFilter
            categoryName="t(toolbar.label_option, {"context":"search_by_name"})"
            chips={[]}
            deleteChip={[Function]}
            showToolbarItem={false}
          >
            <SearchName />
          </ToolbarFilter>
          <ToolbarFilter
            categoryName="t(toolbar.label_option, {"context":"search_credentials_by_name"})"
            chips={[]}
            deleteChip={[Function]}
            showToolbarItem={false}
          >
            <SearchCredentialsName />
          </ToolbarFilter>
          <ToolbarFilter
            categoryName="t(toolbar.label_option, {"context":"source_type"})"
            chips={[]}
            deleteChip={[Function]}
            showToolbarItem={false}
          >
            <SourceType />
          </ToolbarFilter>
        </ForwardRef>
      </ToolbarToggleGroup>
      <ToolbarItem
        variant="separator"
      />
      <ToolbarItem
        spacer={
          {
            "default": "spacerSm",
          }
        }
      >
        <ViewToolbarFieldSort
          t={[Function]}
          useOnSelect={[Function]}
          useView={[Function]}
        />
      </ToolbarItem>
      <ToolbarItem
        variant="separator"
      />
      <ToolbarItem>
        <RefreshTimeButton
          lastRefresh={0}
          onRefresh={[Function]}
          t={[Function]}
        />
      </ToolbarItem>
      <ToolbarItem
        alignment={
          {
            "lg": "alignRight",
            "md": "alignLeft",
          }
        }
      />
    </ToolbarContent>
  </Toolbar>
  <Divider />
</React.Fragment>
`;
